// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: slot.sql

package db

import (
	"context"
)

const addSlot = `-- name: AddSlot :one
INSERT INTO slot (
    id,
    floor_id,
    vehicle_type,
    is_booked
) VALUES (
    $1, $2, $3, $4
) RETURNING id, floor_id, vehicle_type, is_booked
`

type AddSlotParams struct {
	ID          int32       `json:"id"`
	FloorID     int32       `json:"floor_id"`
	VehicleType VehicleType `json:"vehicle_type"`
	IsBooked    bool        `json:"is_booked"`
}

func (q *Queries) AddSlot(ctx context.Context, arg AddSlotParams) (Slot, error) {
	row := q.db.QueryRowContext(ctx, addSlot,
		arg.ID,
		arg.FloorID,
		arg.VehicleType,
		arg.IsBooked,
	)
	var i Slot
	err := row.Scan(
		&i.ID,
		&i.FloorID,
		&i.VehicleType,
		&i.IsBooked,
	)
	return i, err
}

const getAllFreeSlotsByVehicleType = `-- name: GetAllFreeSlotsByVehicleType :many
SELECT floor_id, count(*) as free_slots FROM slot 
where vehicle_type = $1 and is_booked = false 
group by 1
having free_slots > 0
`

type GetAllFreeSlotsByVehicleTypeRow struct {
	FloorID   int32 `json:"floor_id"`
	FreeSlots int64 `json:"free_slots"`
}

func (q *Queries) GetAllFreeSlotsByVehicleType(ctx context.Context, vehicleType VehicleType) ([]GetAllFreeSlotsByVehicleTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFreeSlotsByVehicleType, vehicleType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllFreeSlotsByVehicleTypeRow{}
	for rows.Next() {
		var i GetAllFreeSlotsByVehicleTypeRow
		if err := rows.Scan(&i.FloorID, &i.FreeSlots); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreeSlotByVehicleType = `-- name: GetFreeSlotByVehicleType :one
SELECT id, floor_id, vehicle_type, is_booked FROM slot 
where vehicle_type = $1 and is_booked = false 
order by floor_id, id
limit 1
`

func (q *Queries) GetFreeSlotByVehicleType(ctx context.Context, vehicleType VehicleType) (Slot, error) {
	row := q.db.QueryRowContext(ctx, getFreeSlotByVehicleType, vehicleType)
	var i Slot
	err := row.Scan(
		&i.ID,
		&i.FloorID,
		&i.VehicleType,
		&i.IsBooked,
	)
	return i, err
}

const getOccupiedSlotsByVehicleType = `-- name: GetOccupiedSlotsByVehicleType :many
SELECT floor_id, count(*) as free_slots FROM slot 
where vehicle_type = $1 and is_booked = true 
group by 1
`

type GetOccupiedSlotsByVehicleTypeRow struct {
	FloorID   int32 `json:"floor_id"`
	FreeSlots int64 `json:"free_slots"`
}

func (q *Queries) GetOccupiedSlotsByVehicleType(ctx context.Context, vehicleType VehicleType) ([]GetOccupiedSlotsByVehicleTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getOccupiedSlotsByVehicleType, vehicleType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOccupiedSlotsByVehicleTypeRow{}
	for rows.Next() {
		var i GetOccupiedSlotsByVehicleTypeRow
		if err := rows.Scan(&i.FloorID, &i.FreeSlots); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
