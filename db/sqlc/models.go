// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type TicketStatus string

const (
	TicketStatusOPEN   TicketStatus = "OPEN"
	TicketStatusCLOSED TicketStatus = "CLOSED"
)

func (e *TicketStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TicketStatus(s)
	case string:
		*e = TicketStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TicketStatus: %T", src)
	}
	return nil
}

type NullTicketStatus struct {
	TicketStatus TicketStatus `json:"ticket_status"`
	Valid        bool         `json:"valid"` // Valid is true if TicketStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTicketStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TicketStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TicketStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTicketStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TicketStatus), nil
}

type VehicleType string

const (
	VehicleTypeCar   VehicleType = "Car"
	VehicleTypeBike  VehicleType = "Bike"
	VehicleTypeTruck VehicleType = "Truck"
)

func (e *VehicleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VehicleType(s)
	case string:
		*e = VehicleType(s)
	default:
		return fmt.Errorf("unsupported scan type for VehicleType: %T", src)
	}
	return nil
}

type NullVehicleType struct {
	VehicleType VehicleType `json:"vehicle_type"`
	Valid       bool        `json:"valid"` // Valid is true if VehicleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVehicleType) Scan(value interface{}) error {
	if value == nil {
		ns.VehicleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VehicleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVehicleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VehicleType), nil
}

type Floor struct {
	ID           int32  `json:"id"`
	ParkingLotID string `json:"parking_lot_id"`
}

type Slot struct {
	ID          int32       `json:"id"`
	FloorID     int32       `json:"floor_id"`
	VehicleType VehicleType `json:"vehicle_type"`
	IsBooked    bool        `json:"is_booked"`
}

type Ticket struct {
	ID             string       `json:"id"`
	VehicleColour  string       `json:"vehicle_colour"`
	VehicleType    VehicleType  `json:"vehicle_type"`
	RegistrationNo string       `json:"registration_no"`
	Status         TicketStatus `json:"status"`
	CreatedAt      time.Time    `json:"created_at"`
}
