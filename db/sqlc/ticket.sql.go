// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ticket.sql

package db

import (
	"context"
	"time"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket (
    id,
    vehicle_colour,
    vehicle_type,
    registration_no,
    status,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, vehicle_colour, vehicle_type, registration_no, status, created_at
`

type CreateTicketParams struct {
	ID             string       `json:"id"`
	VehicleColour  string       `json:"vehicle_colour"`
	VehicleType    VehicleType  `json:"vehicle_type"`
	RegistrationNo string       `json:"registration_no"`
	Status         TicketStatus `json:"status"`
	CreatedAt      time.Time    `json:"created_at"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.ID,
		arg.VehicleColour,
		arg.VehicleType,
		arg.RegistrationNo,
		arg.Status,
		arg.CreatedAt,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.VehicleColour,
		&i.VehicleType,
		&i.RegistrationNo,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTicketById = `-- name: GetTicketById :one
SELECT id, vehicle_colour, vehicle_type, registration_no, status, created_at FROM ticket WHERE id = $1
`

func (q *Queries) GetTicketById(ctx context.Context, id string) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketById, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.VehicleColour,
		&i.VehicleType,
		&i.RegistrationNo,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
